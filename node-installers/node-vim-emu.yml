---
- hosts: vim-emu-nodes
  remote_user: tngbench
  vars:
    install_base_path: "/home/tngbench"
  tasks:
    #
    # Installation
    #
    - name: "Add sources: Universe repository"
      become: yes
      shell: |
        add-apt-repository "deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) universe"
        apt-get update
    - name: "Install: Install git"
      become: yes  # sudo
      apt:
        name: git
        state: latest
    - name: "Install: Install screen"
      become: yes  # sudo
      apt:
        name: screen
        state: latest
    - name: "Install: Install ansible"
      become: yes
      apt:
        name: ansible
        state: latest
    - name: "Install: Git clone Containernet from GitHub"
      git:
        repo: "https://github.com/containernet/containernet.git"
        dest: "{{ install_base_path }}/containernet"
    - name: "Install: Git clone vim-emu from ETSI OSM repositories"
      git:
        repo: "https://osm.etsi.org/gerrit/osm/vim-emu.git"
        dest: "{{ install_base_path }}/vim-emu"
    - name: "Install: Install Containernet (takes ~30 minutes)"
      become: yes
      shell: "ansible-playbook -i 'localhost,' -c local install.yml"
      args:
        chdir: "{{ install_base_path }}/containernet/ansible"
        creates: "/usr/local/bin/mn"  # skip if Containernet is there (FIXME will collide with Mininet installs)
    - name: "Install: Install vim-emu"
      become: yes
      shell: "ansible-playbook -i 'localhost,' -c local --skip-tags 'nopull' install.yml"
      args:
        chdir: "{{ install_base_path }}/vim-emu/ansible"
        creates: "/usr/local/bin/vim-emu"  # skip if vim-emu is there
    - name: "Install: vim-emu setup.py"
      become: yes
      shell: "python3 setup.py install"
      args:
        chdir: "{{ install_base_path }}/vim-emu"
        creates: "/usr/local/bin/vim-emu"  # skip if vim-emu is there
    - name: "Install: tng-sdk-project (using pip3)"
      become: yes
      shell: "pip3 install tngsdk.project"
    - name: "Install: tng-sdk-package (using pip3)"
      become: yes
      shell: "pip3 install tngsdk.package"
    - name: "Install: Git clone tng-sdk-benchmark (for emusrv component)"
      git:
        repo: "https://github.com/sonata-nfv/tng-sdk-benchmark.git"
        dest: "{{ install_base_path }}/tng-sdk-benchmark"
    - name: "Install: tng-sdk-benchmark setup.py"
      become: yes
      shell: "python3 setup.py install"
      args:
        chdir: "{{ install_base_path }}/tng-sdk-benchmark"
    - name: "Install: Pulling example Docker images"
      become: yes
      shell: |
        docker pull mpeuster/tng-bench-mp
        docker pull mpeuster/vnf-ids-suricata
        docker pull ubuntu:trusty
      args:
        chdir: "{{ install_base_path }}/tng-sdk-benchmark"
    #
    # Configurations
    #
    # allow docker remote connections
    - name: "Config: Allow remote connections to Docker service"
      become: yes
      lineinfile: 
        dest: "/lib/systemd/system/docker.service"
        regexp: "^(.*)ExecStart=/usr/bin/dockerd(.*)$"
        line: "ExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:4998"  # Attention: -H fd:// is used by some machines
        backrefs: yes
    - name: "Config: Restart Docker service"
      become: yes
      shell: |
        systemctl daemon-reload
        service docker restart
    # configure ubuntu firewall to allow connections from outside
    - name: "Config: Enable UFW and deny everything"
      become: yes
      ufw:
        state: enabled
        policy: deny
    - name: "Config: Allow SSH"
      become: yes
      ufw:
        rule: allow
        name: OpenSSH
    - name: "Config: Allow port range 4998-5001"
      become: yes
      ufw:
        rule: allow
        port: 4998:5001
        proto: tcp
    - name: "Config: Allow port 2123"
      become: yes
      ufw:
        rule: allow
        port: 2123
        proto: tcp
    #
    # Start the server
    #
    - name: "Start: Start tng-bench-emusrv server process in screen detached session"
      become: yes
      shell: "screen -d -m tng-bench-emusrv"
      args:
        chdir: "{{ install_base_path }}"